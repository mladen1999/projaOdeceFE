[{"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\reportWebVitals.ts":"1","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\index.tsx":"2","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\MainMenu\\MainMenu.tsx":"3","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\HomePage\\HomePage.tsx":"4","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\CategoryPage\\CategoryPage.tsx":"5","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\ContactPage\\ContactPage.tsx":"6","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\UserLoginPage\\UserLoginPage.tsx":"7","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\api\\api.ts":"8","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\UserRegistrationPage\\UserRegistrationPage.tsx":"9","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\config\\api.config.ts":"10","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\Cart\\Cart.tsx":"11","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\SingleArticlePreview\\SingleArticlePreview.tsx":"12"},{"size":425,"mtime":1612280274922,"results":"13","hashOfConfig":"14"},{"size":1914,"mtime":1612461744539,"results":"15","hashOfConfig":"14"},{"size":1325,"mtime":1612359024327,"results":"16","hashOfConfig":"14"},{"size":3492,"mtime":1612636721523,"results":"17","hashOfConfig":"14"},{"size":16396,"mtime":1612611714175,"results":"18","hashOfConfig":"14"},{"size":981,"mtime":1612547050514,"results":"19","hashOfConfig":"14"},{"size":4662,"mtime":1612520083180,"results":"20","hashOfConfig":"14"},{"size":4167,"mtime":1612523715819,"results":"21","hashOfConfig":"14"},{"size":7672,"mtime":1612522778551,"results":"22","hashOfConfig":"14"},{"size":148,"mtime":1612538847297,"results":"23","hashOfConfig":"14"},{"size":8627,"mtime":1612630113831,"results":"24","hashOfConfig":"14"},{"size":3446,"mtime":1612612579441,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r4gvbj",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\index.tsx",[],["54","55"],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\MainMenu\\MainMenu.tsx",[],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\HomePage\\HomePage.tsx",["56"],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\CategoryPage\\CategoryPage.tsx",["57","58"],"import { faListAlt, faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react'\r\nimport { Button, Card, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport CategoryType from '../../types/CategoryType';\r\nimport api, { ApiResponse } from '../../api/api';\r\nimport ArticleType from '../../types/ArticleType';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { ApiConfig } from '../../config/api.config';\r\nimport SingleArticlePreview from '../SingleArticlePreview/SingleArticlePreview';\r\n\r\ninterface CategoryPageProperties {\r\n    match: {\r\n        params: {\r\n            cId: number;\r\n        }\r\n    }\r\n}\r\n\r\ninterface CategoryPageState {\r\n    isUserLoggedIn: boolean;\r\n    category?: CategoryType;\r\n    subcategories?: CategoryType[];\r\n    articles?: ArticleType[];\r\n    message: string;\r\n    filters: {\r\n        keywords: string;\r\n        priceMinimum: number;\r\n        priceMaximum: number;\r\n        order: \"name asc\" | \"name desc\" | \"price asc\" | \"price desc\";\r\n        selectedFeatures: {\r\n            featureId: number;\r\n            value: string;\r\n        }[];\r\n    };\r\n    features: {\r\n        featureId: number;\r\n        name: string;\r\n        values: string[];\r\n    }[];\r\n}\r\n\r\ninterface CategoryDto {\r\n    categoryId: number;\r\n    name: string;\r\n}\r\n\r\ninterface ArticleDto {\r\n    articleId: number,\r\n    name: string,\r\n    excerpt?: string,\r\n    description?: string,\r\n    articlePrices?: {\r\n        price: number,\r\n        createdAt: string,\r\n    }[],\r\n    photos?: {\r\n        imagePath: string;\r\n    }[],\r\n}\r\n\r\nexport default class CategoryPage extends React.Component<CategoryPageProperties> {\r\n    state: CategoryPageState;\r\n\r\n    constructor(props: Readonly<CategoryPageProperties>) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isUserLoggedIn: true,  \r\n            message: '',\r\n            filters: {\r\n                keywords: ' ',\r\n                priceMinimum: 0.01,\r\n                priceMaximum: 100000,\r\n                order: \"price asc\",\r\n                selectedFeatures: [],\r\n            },\r\n            features: [],\r\n        };\r\n    }\r\n\r\n    private setFeatures(features: any) {\r\n        const newState = Object.assign(this.state, {\r\n            features: features,\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setLogginState(isLoggedIn: boolean) {\r\n        const newState = Object.assign(this.state, {\r\n            isUserLoggedIn: isLoggedIn,\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setMessage(message: string) {\r\n        const newState = Object.assign(this.state, {\r\n            message: message,\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setCategoryData(category: CategoryType) {\r\n        this.setState(Object.assign(this.state, {\r\n            category: category,\r\n        }));\r\n    }\r\n\r\n    private setSubcategories(subcategories: CategoryType[]) {\r\n        this.setState(Object.assign(this.state, {\r\n            subcategories: subcategories,\r\n        }));\r\n    }\r\n\r\n    private setArticles(articles: ArticleType[]) {\r\n        this.setState(Object.assign(this.state, {\r\n            articles: articles,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isUserLoggedIn === false) {\r\n            return (\r\n                <Redirect to=\"/user/login\" />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>\r\n                            <FontAwesomeIcon icon={ faListAlt } /> { this.state.category?.name }\r\n                        </Card.Title>\r\n                        { this.printOptionalMessage() }\r\n\r\n                        { this.showSubcategories() }\r\n\r\n                        <Row>\r\n                            <Col xs=\"12\" md=\"4\" lg=\"3\">\r\n                               { this.printFilters() }\r\n                            </Col>\r\n                            <Col xs=\"12\" md=\"8\" lg=\"9\">\r\n                                { this.showArticles() }\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        \r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    private setNewFilter(newFilter: any) {\r\n        this.setState(Object.assign(this.state, {\r\n            filter: newFilter\r\n        }));\r\n    }\r\n\r\n    private filterKeywordsChanged(event: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setNewFilter(Object.assign(this.state.filters, {\r\n            keywords: event.target.value,\r\n        }));\r\n    }\r\n\r\n    private filterPriceMinChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, {\r\n            priceMinimum: Number(event.target.value),\r\n        }));\r\n    }\r\n\r\n    private filterPriceMaxChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, {\r\n            priceMaximum: Number(event.target.value),\r\n        }));\r\n    }\r\n\r\n    private filterOrderChanged(event: React.ChangeEvent<HTMLSelectElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, {\r\n            order: event.target.value,\r\n        }));\r\n    }\r\n\r\n    private featureFilterChanged(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const featureId = Number(event.target.dataset.featureId);\r\n        const value = event.target.value;\r\n\r\n        if(event.target.checked) {\r\n            this.addFeatureFilterValue(featureId, value);\r\n        } else {\r\n            this.removeFeatureFilterValue(featureId, value);\r\n        }\r\n    }\r\n\r\n    private addFeatureFilterValue(featureId: number, value: string) {\r\n        const newSelectedFeatures = [ ... this.state.filters.selectedFeatures ];\r\n        newSelectedFeatures.push({\r\n            featureId: featureId,\r\n            value: value,\r\n        });\r\n\r\n        this.setSelectedFeatures(newSelectedFeatures);\r\n    }\r\n\r\n    private removeFeatureFilterValue(featureId: number, value: string) {\r\n        const newSelectedFeatures = this.state.filters.selectedFeatures.filter(record => {\r\n            return !(record.featureId === featureId && record.value === value);\r\n        });\r\n\r\n        this.setSelectedFeatures(newSelectedFeatures);\r\n    }\r\n\r\n    private setSelectedFeatures(newSelectedFeatures: any) {\r\n        this.setState(Object.assign(this.state, {\r\n            filters: Object.assign(this.state.filters, {\r\n                selectedFeatures: newSelectedFeatures,\r\n            })\r\n        }));\r\n\r\n        console.log(this.state);\r\n    }\r\n\r\n    private applyFilters() {\r\n        this.getCategoryData();\r\n    }\r\n\r\n    private printFilters() {\r\n        return (\r\n            <>\r\n                <Form.Group>\r\n                    <Form.Label htmlFor=\"keywords\">Search keywords: </Form.Label>\r\n                    <Form.Control type=\"text\" id=\"keywords\"\r\n                                  value={ this.state.filters.keywords }\r\n                                  onChange={ (e) => this.filterKeywordsChanged(e as any) } />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Row>\r\n                        <Col xs=\"12\" sm=\"6\">\r\n                        <Form.Label htmlFor=\"priceMin\">Min price: </Form.Label>\r\n                            <Form.Control type=\"number\" id=\"priceMin\"\r\n                                          step=\"0.01\" min=\"0.01\" max=\"99999.99\"\r\n                                          value={ this.state.filters.priceMinimum }\r\n                                          onChange={ (e) => this.filterPriceMinChanged(e as any) }  />\r\n                        </Col>\r\n                        <Col xs=\"12\" sm=\"6\">\r\n                        <Form.Label htmlFor=\"priceMax\">Max price: </Form.Label>\r\n                            <Form.Control type=\"number\" id=\"priceMax\"\r\n                                          step=\"0.01\" min=\"0.02\" max=\"100000\"\r\n                                          value={ this.state.filters.priceMaximum }\r\n                                          onChange={ (e) => this.filterPriceMaxChanged(e as any) }  />\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Control as=\"select\" id=\"sortOrder\"\r\n                                  value={ this.state.filters.order }\r\n                                  onChange={ (e) => this.filterOrderChanged(e as any) } >\r\n                        <option value=\"name asc\">Sort by name - ascending</option>\r\n                        <option value=\"name desc\">Sort by name - descending</option>\r\n                        <option value=\"price asc\">Sort by price - ascending</option>\r\n                        <option value=\"price desc\">Sort by price - descending</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                { this.state.features.map(this.printFeatureFIlterComponent, this) }\r\n\r\n                <Form.Group>\r\n                    <Button variant=\"primary\"\r\n                            block\r\n                            onClick={ () => this.applyFilters() }>\r\n                        <FontAwesomeIcon icon={ faSearch } /> Search\r\n                    </Button>\r\n                </Form.Group>\r\n            </>\r\n        );\r\n    }\r\n\r\n    private printFeatureFIlterComponent(feature: { featureId: number; name: string; values: string[]; }){\r\n        return (\r\n            <Form.Group>\r\n                <Form.Label><strong>{ feature.name }:</strong> </Form.Label>\r\n                { feature.values.map(value => this.printFeatureFilterCheckBox(feature, value), this) }\r\n            </Form.Group>\r\n        );\r\n    }\r\n\r\n    private printFeatureFilterCheckBox(feature: any, value: string) {\r\n\r\n        return (\r\n            (\r\n                <Form.Check type=\"checkbox\" label={ value }\r\n                            value={ value }\r\n                            data-feature-id={ feature.featureId }\r\n                            onChange={(event: any) => this.featureFilterChanged(event as any)}\r\n                            />\r\n            )\r\n        );\r\n    }\r\n\r\n    private printOptionalMessage() {\r\n        if(this.state.message === '') {\r\n            return;\r\n        }\r\n\r\n        return (\r\n            <Card.Text>\r\n                { this.state.message }\r\n            </Card.Text>\r\n        );\r\n    }\r\n\r\n    private showSubcategories() {\r\n        if(this.state.subcategories?.length === 0) {\r\n            return;\r\n        }\r\n\r\n        return (\r\n            <Row>\r\n                { this.state.subcategories?.map(this.singleCategory) }\r\n            </Row>\r\n        );\r\n\r\n    }\r\n\r\n    private showArticles() {\r\n        if(this.state.articles?.length === 0) {\r\n            return(\r\n                <div>There are no articles for show in this category!</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Row>\r\n                { this.state.articles?.map(this.singleArticle) }\r\n            </Row>\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    private singleCategory(category: CategoryType) {\r\n        return (\r\n            <Col lg=\"3\" md=\"4\" sm=\"6\" xs=\"12\" >\r\n                <Card className=\"mb-3\">\r\n                    <Card.Body>\r\n                    <Card.Title>\r\n                        { category.name }\r\n                    </Card.Title>\r\n                        <Link to={ `/category/${ category.categoryId }` }\r\n                              className=\"btn btn-primary btn-block btn-sm\">\r\n                            Open category\r\n                        </Link>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n\r\n    private singleArticle(article: ArticleType) {\r\n        return (\r\n            <SingleArticlePreview article={article} />\r\n            \r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCategoryData();\r\n    }\r\n\r\n    componentDidUpdate(oldProperties: CategoryPageProperties) {\r\n        if(oldProperties.match.params.cId === this.props.match.params.cId) {\r\n            return;\r\n        }\r\n\r\n        this.getCategoryData();\r\n    }\r\n\r\n    private getCategoryData() {\r\n        api('api/category/' + this.props.match.params.cId, 'get', {})\r\n        .then((res: ApiResponse) => {\r\n            if(res.status === 'login') {\r\n                return this.setLogginState(false);\r\n            }\r\n\r\n            if(res.status === 'error') {\r\n                return this.setMessage('Request error. Please try to refresh the page.');\r\n            }\r\n\r\n            const categoryData: CategoryType = {\r\n                categoryId: res.data.categoryId,\r\n                name: res.data.name,\r\n            };\r\n\r\n            this.setCategoryData(categoryData);\r\n\r\n            // Lista podkategorije\r\n            const subcategories: CategoryType[] = \r\n            res.data.categories.map((category: CategoryDto) => {\r\n                return {\r\n                    categoryId: category.categoryId,\r\n                    name: category.name,\r\n                }\r\n            });\r\n\r\n            this.setSubcategories(subcategories);\r\n        });\r\n\r\n        const orderParts = this.state.filters.order.split(' ');\r\n        const orderBy = orderParts[0];\r\n        const orderDirection = orderParts[1].toUpperCase();\r\n\r\n        const featureFilters: any[] = [];\r\n\r\n        for(const item of this.state.filters.selectedFeatures) {\r\n            let found = false;\r\n            let foundRef = null;\r\n\r\n\r\n            for(const featureFilter of featureFilters) {\r\n                if(featureFilter.featureId === item.featureId) {\r\n                    found = true;\r\n                    foundRef = featureFilter;\r\n                    break;\r\n                }\r\n            }\r\n            if(!found) {\r\n                featureFilters.push({\r\n                    featureId: item.featureId,\r\n                    values: [ item.value ],\r\n                });\r\n            } else {\r\n                foundRef.values.push(item.value);\r\n            }\r\n        }\r\n\r\n        api('api/article/search/', 'post', {\r\n            categoryId: Number(this.props.match.params.cId),\r\n            keywords: this.state.filters.keywords,\r\n            priceMin: this.state.filters.priceMinimum,\r\n            priceMax: this.state.filters.priceMaximum,\r\n            features: featureFilters,\r\n            orderBy: orderBy,\r\n            orderDirection: orderDirection,\r\n        })\r\n        .then((res: ApiResponse) => {\r\n            if(res.status === 'login') {\r\n                return this.setLogginState(false);\r\n            }\r\n\r\n            if(res.status === 'error') {\r\n                return this.setMessage('Request error. Please try to refresh the page.');\r\n            }\r\n\r\n            if(res.data.statusCode === 0) {\r\n                this.setMessage('');\r\n                this.setArticles([]);\r\n                return;\r\n            }\r\n\r\n            const articles: ArticleType[] =\r\n            res.data.map((article: ArticleDto) => {\r\n                const object: ArticleType = {\r\n                    articleId: article.articleId,\r\n                    name: article.name,\r\n                    excerpt: article.excerpt,\r\n                    description: article.description,\r\n                    imageUrl: '',\r\n                    price: 0,\r\n                };\r\n\r\n                if(article.photos !== undefined && article.photos?.length > 0) {\r\n                    object.imageUrl = article.photos[article.photos?.length-1].imagePath;\r\n                }\r\n\r\n                if(article.articlePrices !== undefined && article.articlePrices?.length > 0) {\r\n                    object.price = article.articlePrices[article.articlePrices?.length-1].price;\r\n                }\r\n                \r\n                return object;\r\n            });\r\n\r\n            this.setArticles(articles);\r\n        });\r\n\r\n        this.getFeatures();\r\n    }\r\n\r\n    getFeatures() {\r\n        api('api/feature/values/' + this.props.match.params.cId, 'get', {})\r\n        .then((res: ApiResponse) => {\r\n            if(res.status === 'login') {\r\n                return this.setLogginState(false);\r\n            }\r\n\r\n            if(res.status === 'error') {\r\n                return this.setMessage('Request error. Please try to refresh the page.');\r\n            }\r\n\r\n            this.setFeatures(res.data.features);\r\n\r\n        });\r\n    }\r\n}","C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\ContactPage\\ContactPage.tsx",[],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\UserLoginPage\\UserLoginPage.tsx",[],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\api\\api.ts",[],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\UserRegistrationPage\\UserRegistrationPage.tsx",[],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\config\\api.config.ts",[],["59","60"],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\Cart\\Cart.tsx",[],["61","62"],"C:\\Users\\mlade\\Desktop\\KSS_Zavrsni_Prokjekat\\Projekat\\front-end\\src\\components\\SingleArticlePreview\\SingleArticlePreview.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":90,"column":25,"nodeType":"69","endLine":90,"endColumn":60},{"ruleId":"70","severity":1,"message":"71","line":9,"column":10,"nodeType":"72","messageId":"73","endLine":9,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":200,"column":42,"nodeType":"76","messageId":"77","endLine":200,"endColumn":43,"fix":"78"},{"ruleId":"63","replacedBy":"79"},{"ruleId":"65","replacedBy":"80"},{"ruleId":"63","replacedBy":"81"},{"ruleId":"65","replacedBy":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'ApiConfig' is defined but never used.","Identifier","unusedVar","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"85","text":"86"},["83"],["84"],["83"],["84"],"no-global-assign","no-unsafe-negation",[5818,5819],""]